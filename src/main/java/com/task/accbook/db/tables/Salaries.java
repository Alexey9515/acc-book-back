/*
 * This file is generated by jOOQ.
 */
package com.task.accbook.db.tables;


import com.task.accbook.db.Indexes;
import com.task.accbook.db.Keys;
import com.task.accbook.db.Public;
import com.task.accbook.db.tables.records.SalariesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Salaries extends TableImpl<SalariesRecord> {

    private static final long serialVersionUID = 1456485804;

    /**
     * The reference instance of <code>public.salaries</code>
     */
    public static final Salaries SALARIES = new Salaries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalariesRecord> getRecordType() {
        return SalariesRecord.class;
    }

    /**
     * The column <code>public.salaries.id</code>.
     */
    public final TableField<SalariesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('salaries_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.salaries.user_id</code>.
     */
    public final TableField<SalariesRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.salaries.value</code>.
     */
    public final TableField<SalariesRecord, Double> VALUE = createField("value", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * Create a <code>public.salaries</code> table reference
     */
    public Salaries() {
        this(DSL.name("salaries"), null);
    }

    /**
     * Create an aliased <code>public.salaries</code> table reference
     */
    public Salaries(String alias) {
        this(DSL.name(alias), SALARIES);
    }

    /**
     * Create an aliased <code>public.salaries</code> table reference
     */
    public Salaries(Name alias) {
        this(alias, SALARIES);
    }

    private Salaries(Name alias, Table<SalariesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Salaries(Name alias, Table<SalariesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Salaries(Table<O> child, ForeignKey<O, SalariesRecord> key) {
        super(child, key, SALARIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SALARIES_PK, Indexes.SALARIES_USER_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SalariesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SALARIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SalariesRecord> getPrimaryKey() {
        return Keys.SALARIES_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SalariesRecord>> getKeys() {
        return Arrays.<UniqueKey<SalariesRecord>>asList(Keys.SALARIES_PK, Keys.SALARIES_USER_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SalariesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SalariesRecord, ?>>asList(Keys.SALARIES__SALARIES_FK0);
    }

    public Users users() {
        return new Users(this, Keys.SALARIES__SALARIES_FK0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Salaries as(String alias) {
        return new Salaries(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Salaries as(Name alias) {
        return new Salaries(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Salaries rename(String name) {
        return new Salaries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salaries rename(Name name) {
        return new Salaries(name, null);
    }
}
